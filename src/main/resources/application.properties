spring.application.name=api-gateway
server.port=8765

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#you are telling Spring Cloud Gateway to automatically discover routes from your service registry (like Eureka) instead of manually defining them.
#http://localhost:8765/CURRENCY-EXCHANGE/currency/exchange/USD/INR
#spring.cloud.gateway.server.webflux.discovery.locator.enabled=true

#tells Spring Cloud Gateway to automatically convert service IDs from Eureka (or another discovery service) into lowercase when creating routes.
#http://localhost:8765/currency-exchange/currency/exchange/USD/INR
#spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

resilience4j.retry.instances.heart-beat.maxAttempts=5
resilience4j.retry.instances.heart-beat.waitDuration=1s
resilience4j.retry.instances.heart-beat.enableExponentialBackoff=true

#here this property calculate if 50 percentage of last calls fails then circuit will open and imediately fallback
resilience4j.circuitbreaker.instances.heart-beat.failureRateThreshold=50

#here The number of recent calls the Circuit Breaker considers to calculate the failure rate.
#Determines the ?window? of requests that decides whether the circuit should open.
resilience4j.circuitbreaker.instances.heart-beat.slidingWindowSize=10

#waitDuration in open state
resilience4j.circuitbreaker.instances.heart-beat.waitDurationInOpenState=5s

